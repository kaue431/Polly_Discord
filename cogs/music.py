from discord.ext import commands
import yt_dlp
import discord
import asyncio

# Configura√ß√µes do yt_dlp
YTDL_OPTIONS = {
    "format": "bestaudio/best",
    "postprocessors": [{
        "key": "FFmpegExtractAudio",
        "preferredcodec": "mp3",
        "preferredquality": "192",
    }],
    "quiet": True,
    "no_warnings": True,
}

# Configura√ß√µes do FFmpeg
FFMPEG_OPTIONS = {
    "before_options": (
        "-reconnect 1 -reconnect_streamed 1 -reconnect_delay_max 5 "
        "-nostdin -loglevel quiet -hide_banner"
    ),
    "options": "-vn",
}

class Music(commands.Cog):
    def __init__(self, bot):
        self.bot = bot
        self.queue = []  # Fila de m√∫sicas
        self.current_song = None  # M√∫sica atualmente tocando
        self.is_playing = False  # Status de reprodu√ß√£o

    @commands.command()
    async def join(self, ctx):
        """Faz o bot entrar no canal de voz."""
        if ctx.author.voice:
            channel = ctx.author.voice.channel
            if ctx.voice_client is None:
                await channel.connect()
                await ctx.send(f"Conectado ao canal: {channel.name}")
            else:
                await ctx.send("J√° estou conectado a um canal de voz.")
        else:
            await ctx.send("Voc√™ precisa estar em um canal de voz para usar este comando.")

    @commands.command()
    async def play(self, ctx, *, search: str):
        """Reproduz uma m√∫sica ou adiciona √† fila."""
        vc = ctx.voice_client

        if not vc:
            if ctx.author.voice:
                channel = ctx.author.voice.channel
                vc = await channel.connect()
            else:
                return await ctx.send("Voc√™ precisa estar em um canal de voz para usar este comando.")

        # Adicionar √† fila se j√° estiver tocando
        if self.is_playing or self.queue:
            await ctx.send(f"üé∂ Adicionado √† fila: **{search}**")
            self.queue.append(search)
        else:
            await self._play_music(ctx, search)

    async def _play_music(self, ctx, search):
        """Fun√ß√£o auxiliar para reproduzir uma m√∫sica."""
        vc = ctx.voice_client
        self.is_playing = True
        loading_message = await ctx.send("üîÑ Carregando a m√∫sica, aguarde...")

        try:
            with yt_dlp.YoutubeDL(YTDL_OPTIONS) as ytdl:
                info = ytdl.extract_info(f"ytsearch:{search}", download=False)["entries"][0]
                url = info["url"]
                title = info["title"]

            self.current_song = title
            vc.stop()  # Certifica que n√£o h√° √°udio em execu√ß√£o
            vc.play(
                discord.PCMVolumeTransformer(
                    discord.FFmpegPCMAudio(source=url, **FFMPEG_OPTIONS),
                    volume=0.5  # Ajuste de volume padr√£o
                ),
                after=lambda e: asyncio.run_coroutine_threadsafe(self._next(ctx), self.bot.loop),
            )
            await loading_message.edit(content=f"üé∂ Tocando agora: **{title}**")
        except Exception as e:
            self.is_playing = False
            await loading_message.edit(content=f"‚ùå Ocorreu um erro ao carregar a m√∫sica: {str(e)}")

    async def _next(self, ctx):
        """Fun√ß√£o chamada automaticamente ao terminar uma m√∫sica."""
        vc = ctx.voice_client
        if self.queue:
            next_song = self.queue.pop(0)
            await self._play_music(ctx, next_song)
        else:
            self.is_playing = False
            self.current_song = None
            if vc:
                await vc.disconnect()

    @commands.command()
    async def pause(self, ctx):
        """Pausa a m√∫sica atual."""
        vc = ctx.voice_client
        if vc and vc.is_playing():
            vc.pause()
            await ctx.send("‚è∏ M√∫sica pausada.")
        else:
            await ctx.send("Nenhuma m√∫sica est√° tocando no momento.")

    @commands.command()
    async def resume(self, ctx):
        """Retoma a m√∫sica pausada."""
        vc = ctx.voice_client
        if vc and vc.is_paused():
            vc.resume()
            await ctx.send("‚ñ∂ M√∫sica retomada.")
        else:
            await ctx.send("Nenhuma m√∫sica est√° pausada no momento.")

    @commands.command()
    async def skip(self, ctx):
        """Pula para a pr√≥xima m√∫sica na fila."""
        vc = ctx.voice_client
        if vc and vc.is_playing():
            vc.stop()  # Para a m√∫sica atual e chama `_next`
            await ctx.send("‚è≠ M√∫sica pulada.")
        else:
            await ctx.send("Nenhuma m√∫sica est√° tocando para pular.")

    @commands.command()
    async def queue(self, ctx):
        """Exibe a fila de m√∫sicas."""
        if self.queue:
            queue_list = "\n".join([f"{idx + 1}. {song}" for idx, song in enumerate(self.queue)])
            await ctx.send(f"üìú **Fila de m√∫sicas:**\n```\n{queue_list}\n```")
        else:
            await ctx.send("üö´ A fila est√° vazia no momento.")

    @commands.command()
    async def leave(self, ctx):
        """Faz o bot sair do canal de voz."""
        vc = ctx.voice_client
        if vc:
            await vc.disconnect()
            self.queue.clear()  # Limpa a fila ao sair
            self.is_playing = False
            self.current_song = None
            await ctx.send("Desconectado do canal de voz.")
        else:
            await ctx.send("Eu n√£o estou conectado a nenhum canal de voz.")

async def setup(bot):
    await bot.add_cog(Music(bot))
